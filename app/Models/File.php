<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;

/**
 * @property mixed $directory
 * @property mixed $original_name
 * @property bool $public
 */
class File extends Model
{
    private const PUBLIC_DISK = 'public';
    private const PRIVATE_DISK = 'private';

    use HasFactory;

    protected $fillable = [
        'original_name',
        'mime_type',
        'size',
        'extension',
        'directory',
        'public'
    ];

    /**
     * Relation for project preview
     *
     * @return HasOne
     */
    public function previewProject(): HasOne
    {
        return $this->hasOne(Project::class, 'preview_id', 'id');
    }

    /**
     * Returns path to the file from the storage.
     *
     * @return string
     */
    public function getPath(): string
    {
        return $this->directory.'/'.$this->original_name;
    }

    /**
     * Returns name of the disk.
     *
     * @return string
     */
    protected function getDisk(): string
    {
        if ($this->public){
            return self::PUBLIC_DISK;
        }

        return self::PRIVATE_DISK;
    }

    /**
     * Stores file in the storage.
     *
     * @param UploadedFile $file
     *
     * @return bool|string
     */
    public function store(UploadedFile $file): bool|string
    {
        return $file->storeAs($this->directory, $this->original_name, ['disk' => $this->getDisk()]);
    }


    public function delete(): ?bool
    {
        Storage::disk($this->getDisk())->delete($this->getPath());

        return parent::delete(); // TODO: Change the autogenerated stub
    }

}
